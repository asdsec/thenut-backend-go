// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: comment.sql

package db

import (
	"context"
	"database/sql"
)

const createComment = `-- name: CreateComment :one
INSERT INTO comments (
  comment_type,
  post_id,
  merchant_id,
  owner,
  comment 
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, comment_type, post_id, merchant_id, owner, comment, created_at
`

type CreateCommentParams struct {
	CommentType CommentType   `json:"comment_type"`
	PostID      sql.NullInt64 `json:"post_id"`
	MerchantID  sql.NullInt64 `json:"merchant_id"`
	Owner       string        `json:"owner"`
	Comment     string        `json:"comment"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.CommentType,
		arg.PostID,
		arg.MerchantID,
		arg.Owner,
		arg.Comment,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CommentType,
		&i.PostID,
		&i.MerchantID,
		&i.Owner,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comments
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const getComment = `-- name: GetComment :one
SELECT id, comment_type, post_id, merchant_id, owner, comment, created_at FROM comments
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getComment, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.CommentType,
		&i.PostID,
		&i.MerchantID,
		&i.Owner,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const listMerchantComments = `-- name: ListMerchantComments :many
SELECT id, comment_type, post_id, merchant_id, owner, comment, created_at FROM comments
WHERE merchant_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListMerchantCommentsParams struct {
	MerchantID sql.NullInt64 `json:"merchant_id"`
	Limit      int32         `json:"limit"`
	Offset     int32         `json:"offset"`
}

func (q *Queries) ListMerchantComments(ctx context.Context, arg ListMerchantCommentsParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listMerchantComments, arg.MerchantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.CommentType,
			&i.PostID,
			&i.MerchantID,
			&i.Owner,
			&i.Comment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPostComments = `-- name: ListPostComments :many
SELECT id, comment_type, post_id, merchant_id, owner, comment, created_at FROM comments
WHERE post_id = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListPostCommentsParams struct {
	PostID sql.NullInt64 `json:"post_id"`
	Limit  int32         `json:"limit"`
	Offset int32         `json:"offset"`
}

func (q *Queries) ListPostComments(ctx context.Context, arg ListPostCommentsParams) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, listPostComments, arg.PostID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Comment{}
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.CommentType,
			&i.PostID,
			&i.MerchantID,
			&i.Owner,
			&i.Comment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
