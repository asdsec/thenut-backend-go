// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: customer.sql

package db

import (
	"context"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
  owner
) VALUES (
  $1
) RETURNING id, owner, image_url, created_at
`

func (q *Queries) CreateCustomer(ctx context.Context, owner string) (Customer, error) {
	row := q.db.QueryRowContext(ctx, createCustomer, owner)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.ImageUrl,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, owner, image_url, created_at FROM customers
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRowContext(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.ImageUrl,
		&i.CreatedAt,
	)
	return i, err
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
SET image_url = COALESCE($2, image_url)
WHERE id = $1
RETURNING id, owner, image_url, created_at
`

type UpdateCustomerParams struct {
	ID       int64  `json:"id"`
	ImageUrl string `json:"image_url"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRowContext(ctx, updateCustomer, arg.ID, arg.ImageUrl)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.ImageUrl,
		&i.CreatedAt,
	)
	return i, err
}
