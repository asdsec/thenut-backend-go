// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: post.sql

package db

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
  merchant_id,
  title,
  image_url
) VALUES (
  $1, $2, $3
) RETURNING id, merchant_id, title, image_url, likes, created_at
`

type CreatePostParams struct {
	MerchantID int64          `json:"merchant_id"`
	Title      sql.NullString `json:"title"`
	ImageUrl   sql.NullString `json:"image_url"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createPost, arg.MerchantID, arg.Title, arg.ImageUrl)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.Title,
		&i.ImageUrl,
		&i.Likes,
		&i.CreatedAt,
	)
	return i, err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deletePost, id)
	return err
}

const getPost = `-- name: GetPost :one
SELECT id, merchant_id, title, image_url, likes, created_at FROM posts
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetPost(ctx context.Context, id int64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPost, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.Title,
		&i.ImageUrl,
		&i.Likes,
		&i.CreatedAt,
	)
	return i, err
}

const listMerchantPosts = `-- name: ListMerchantPosts :many
SELECT id, merchant_id, title, image_url, likes, created_at FROM posts
WHERE merchant_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type ListMerchantPostsParams struct {
	MerchantID int64 `json:"merchant_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListMerchantPosts(ctx context.Context, arg ListMerchantPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listMerchantPosts, arg.MerchantID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.MerchantID,
			&i.Title,
			&i.ImageUrl,
			&i.Likes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPosts = `-- name: ListPosts :many
SELECT id, merchant_id, title, image_url, likes, created_at FROM posts
ORDER BY created_at DESC
LIMIT $1
OFFSET $2
`

type ListPostsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPosts(ctx context.Context, arg ListPostsParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listPosts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.MerchantID,
			&i.Title,
			&i.ImageUrl,
			&i.Likes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
