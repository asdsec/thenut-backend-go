// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: merchant.sql

package db

import (
	"context"
	"database/sql"
)

const addMerchantBalance = `-- name: AddMerchantBalance :one
UPDATE merchants
SET balance = balance + $1
WHERE id = $2
RETURNING id, owner, balance, profession, title, about, image_url, rating, created_at
`

type AddMerchantBalanceParams struct {
	Amount int64 `json:"amount"`
	ID     int64 `json:"id"`
}

func (q *Queries) AddMerchantBalance(ctx context.Context, arg AddMerchantBalanceParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, addMerchantBalance, arg.Amount, arg.ID)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Profession,
		&i.Title,
		&i.About,
		&i.ImageUrl,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const createMerchant = `-- name: CreateMerchant :one
INSERT INTO merchants (
  owner,
  balance,
  profession,
  title,
  about
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, owner, balance, profession, title, about, image_url, rating, created_at
`

type CreateMerchantParams struct {
	Owner      string `json:"owner"`
	Balance    int64  `json:"balance"`
	Profession string `json:"profession"`
	Title      string `json:"title"`
	About      string `json:"about"`
}

func (q *Queries) CreateMerchant(ctx context.Context, arg CreateMerchantParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, createMerchant,
		arg.Owner,
		arg.Balance,
		arg.Profession,
		arg.Title,
		arg.About,
	)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Profession,
		&i.Title,
		&i.About,
		&i.ImageUrl,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMerchant = `-- name: DeleteMerchant :exec
DELETE FROM merchants
WHERE id = $1
`

func (q *Queries) DeleteMerchant(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMerchant, id)
	return err
}

const getMerchant = `-- name: GetMerchant :one
SELECT id, owner, balance, profession, title, about, image_url, rating, created_at FROM merchants
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetMerchant(ctx context.Context, id int64) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, getMerchant, id)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Profession,
		&i.Title,
		&i.About,
		&i.ImageUrl,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}

const listMerchants = `-- name: ListMerchants :many
SELECT id, owner, balance, profession, title, about, image_url, rating, created_at FROM merchants
WHERE owner = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListMerchantsParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListMerchants(ctx context.Context, arg ListMerchantsParams) ([]Merchant, error) {
	rows, err := q.db.QueryContext(ctx, listMerchants, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Merchant{}
	for rows.Next() {
		var i Merchant
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Balance,
			&i.Profession,
			&i.Title,
			&i.About,
			&i.ImageUrl,
			&i.Rating,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMerchant = `-- name: UpdateMerchant :one
UPDATE merchants
SET balance = COALESCE($1, balance),
    profession = COALESCE($2, profession),
    title = COALESCE($3, title),
    about = COALESCE($4, about),
    image_url = COALESCE($5, image_url),
    rating = COALESCE($6, rating)
WHERE id = $7
RETURNING id, owner, balance, profession, title, about, image_url, rating, created_at
`

type UpdateMerchantParams struct {
	Balance    sql.NullInt64  `json:"balance"`
	Profession sql.NullString `json:"profession"`
	Title      sql.NullString `json:"title"`
	About      sql.NullString `json:"about"`
	ImageUrl   sql.NullString `json:"image_url"`
	Rating     sql.NullInt32  `json:"rating"`
	ID         int64          `json:"id"`
}

func (q *Queries) UpdateMerchant(ctx context.Context, arg UpdateMerchantParams) (Merchant, error) {
	row := q.db.QueryRowContext(ctx, updateMerchant,
		arg.Balance,
		arg.Profession,
		arg.Title,
		arg.About,
		arg.ImageUrl,
		arg.Rating,
		arg.ID,
	)
	var i Merchant
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Balance,
		&i.Profession,
		&i.Title,
		&i.About,
		&i.ImageUrl,
		&i.Rating,
		&i.CreatedAt,
	)
	return i, err
}
