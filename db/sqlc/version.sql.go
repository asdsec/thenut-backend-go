// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: version.sql

package db

import (
	"context"
)

const createAppVersion = `-- name: CreateAppVersion :one
INSERT INTO app_versions (
  tag,
  version 
) VALUES (
  $1, $2
) RETURNING id, tag, version, created_at
`

type CreateAppVersionParams struct {
	Tag     string `json:"tag"`
	Version string `json:"version"`
}

func (q *Queries) CreateAppVersion(ctx context.Context, arg CreateAppVersionParams) (AppVersion, error) {
	row := q.db.QueryRowContext(ctx, createAppVersion, arg.Tag, arg.Version)
	var i AppVersion
	err := row.Scan(
		&i.ID,
		&i.Tag,
		&i.Version,
		&i.CreatedAt,
	)
	return i, err
}

const getAppVersion = `-- name: GetAppVersion :one
SELECT id, tag, version, created_at FROM app_versions
WHERE tag = $1 LIMIT 1
`

func (q *Queries) GetAppVersion(ctx context.Context, tag string) (AppVersion, error) {
	row := q.db.QueryRowContext(ctx, getAppVersion, tag)
	var i AppVersion
	err := row.Scan(
		&i.ID,
		&i.Tag,
		&i.Version,
		&i.CreatedAt,
	)
	return i, err
}

const listAppVersions = `-- name: ListAppVersions :many
SELECT id, tag, version, created_at FROM app_versions
ORDER BY created_at DESC
`

func (q *Queries) ListAppVersions(ctx context.Context) ([]AppVersion, error) {
	rows, err := q.db.QueryContext(ctx, listAppVersions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []AppVersion{}
	for rows.Next() {
		var i AppVersion
		if err := rows.Scan(
			&i.ID,
			&i.Tag,
			&i.Version,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAppVersion = `-- name: UpdateAppVersion :one
UPDATE app_versions
SET tag = $1, version = $2
WHERE id = $3
RETURNING id, tag, version, created_at
`

type UpdateAppVersionParams struct {
	Tag     string `json:"tag"`
	Version string `json:"version"`
	ID      int64  `json:"id"`
}

func (q *Queries) UpdateAppVersion(ctx context.Context, arg UpdateAppVersionParams) (AppVersion, error) {
	row := q.db.QueryRowContext(ctx, updateAppVersion, arg.Tag, arg.Version, arg.ID)
	var i AppVersion
	err := row.Scan(
		&i.ID,
		&i.Tag,
		&i.Version,
		&i.CreatedAt,
	)
	return i, err
}
