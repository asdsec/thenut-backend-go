// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  hashed_password,
  full_name,
  email,
  phone_number,
  gender,
  birth_date
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
) RETURNING username, hashed_password, full_name, email, phone_number, image_url, gender, disabled, birth_date, password_changed_at, created_at
`

type CreateUserParams struct {
	Username       string    `json:"username"`
	HashedPassword string    `json:"hashed_password"`
	FullName       string    `json:"full_name"`
	Email          string    `json:"email"`
	PhoneNumber    string    `json:"phone_number"`
	Gender         string    `json:"gender"`
	BirthDate      time.Time `json:"birth_date"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.PhoneNumber,
		arg.Gender,
		arg.BirthDate,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.ImageUrl,
		&i.Gender,
		&i.Disabled,
		&i.BirthDate,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE username = $1
`

func (q *Queries) DeleteUser(ctx context.Context, username string) error {
	_, err := q.db.ExecContext(ctx, deleteUser, username)
	return err
}

const getUser = `-- name: GetUser :one
SELECT username, hashed_password, full_name, email, phone_number, image_url, gender, disabled, birth_date, password_changed_at, created_at FROM users
WHERE username = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.ImageUrl,
		&i.Gender,
		&i.Disabled,
		&i.BirthDate,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateEmail = `-- name: UpdateEmail :one
UPDATE users
SET email = $2
WHERE username = $1
RETURNING username, hashed_password, full_name, email, phone_number, image_url, gender, disabled, birth_date, password_changed_at, created_at
`

type UpdateEmailParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) UpdateEmail(ctx context.Context, arg UpdateEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateEmail, arg.Username, arg.Email)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.ImageUrl,
		&i.Gender,
		&i.Disabled,
		&i.BirthDate,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :one
UPDATE users
SET hashed_password = $2, password_changed_at = $3
WHERE username = $1
RETURNING username, hashed_password, full_name, email, phone_number, image_url, gender, disabled, birth_date, password_changed_at, created_at
`

type UpdatePasswordParams struct {
	Username          string    `json:"username"`
	HashedPassword    string    `json:"hashed_password"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updatePassword, arg.Username, arg.HashedPassword, arg.PasswordChangedAt)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.ImageUrl,
		&i.Gender,
		&i.Disabled,
		&i.BirthDate,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET full_name = COALESCE($1, full_name),
    phone_number = COALESCE($2, phone_number),
    gender = COALESCE($3, gender), 
    birth_date = COALESCE($4, birth_date),
    image_url = COALESCE($5, image_url)
WHERE username = $6
RETURNING username, hashed_password, full_name, email, phone_number, image_url, gender, disabled, birth_date, password_changed_at, created_at
`

type UpdateUserParams struct {
	FullName    sql.NullString `json:"full_name"`
	PhoneNumber sql.NullString `json:"phone_number"`
	Gender      sql.NullString `json:"gender"`
	BirthDate   sql.NullTime   `json:"birth_date"`
	ImageUrl    sql.NullString `json:"image_url"`
	Username    string         `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.FullName,
		arg.PhoneNumber,
		arg.Gender,
		arg.BirthDate,
		arg.ImageUrl,
		arg.Username,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.ImageUrl,
		&i.Gender,
		&i.Disabled,
		&i.BirthDate,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
