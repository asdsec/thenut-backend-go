// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: consultancy.sql

package db

import (
	"context"
)

const createConsultancy = `-- name: CreateConsultancy :one
INSERT INTO consultancies (
  merchant_id,
  customer_id,
  cost
) VALUES (
  $1, $2, $3
) RETURNING id, merchant_id, customer_id, cost, created_at
`

type CreateConsultancyParams struct {
	MerchantID int64 `json:"merchant_id"`
	CustomerID int64 `json:"customer_id"`
	Cost       int64 `json:"cost"`
}

func (q *Queries) CreateConsultancy(ctx context.Context, arg CreateConsultancyParams) (Consultancy, error) {
	row := q.db.QueryRowContext(ctx, createConsultancy, arg.MerchantID, arg.CustomerID, arg.Cost)
	var i Consultancy
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.CustomerID,
		&i.Cost,
		&i.CreatedAt,
	)
	return i, err
}

const getConsultancy = `-- name: GetConsultancy :one
SELECT id, merchant_id, customer_id, cost, created_at FROM consultancies
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetConsultancy(ctx context.Context, id int64) (Consultancy, error) {
	row := q.db.QueryRowContext(ctx, getConsultancy, id)
	var i Consultancy
	err := row.Scan(
		&i.ID,
		&i.MerchantID,
		&i.CustomerID,
		&i.Cost,
		&i.CreatedAt,
	)
	return i, err
}

const listConsultancies = `-- name: ListConsultancies :many
SELECT id, merchant_id, customer_id, cost, created_at FROM consultancies
WHERE 
    merchant_id = $1 OR
    customer_id = $2
ORDER BY id
LIMIT $3
OFFSET $4
`

type ListConsultanciesParams struct {
	MerchantID int64 `json:"merchant_id"`
	CustomerID int64 `json:"customer_id"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) ListConsultancies(ctx context.Context, arg ListConsultanciesParams) ([]Consultancy, error) {
	rows, err := q.db.QueryContext(ctx, listConsultancies,
		arg.MerchantID,
		arg.CustomerID,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Consultancy{}
	for rows.Next() {
		var i Consultancy
		if err := rows.Scan(
			&i.ID,
			&i.MerchantID,
			&i.CustomerID,
			&i.Cost,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
